/*
  Containers
*/

@mixin container-fluid {
  overflow: hidden;
  margin: 0 auto;
  width: $container_width_fluid;
}

@mixin build-container ($container_key, $container_size, $breakpoint_key, $breakpoint) {
  @if ($container_key == $breakpoint_key) {
    @if ($breakpoint) {
      @media (min-width: $breakpoint) {
        width: $container_size
      }
    } @else {
      width: $container_size
    }
  }
}

@mixin build-containers ($breakpoint_key, $breakpoint) {
  @each $container in $container_sizes {
    @include build-container (nth($container, 1), nth($container, 2), $breakpoint_key, $breakpoint);
  }
}

@mixin container {
  margin: 0 auto;
  @if ($container_max_width) {
    max-width: $container_max_width;
  }
  @each $breakpoint in $breakpoint_sizes {
    @include build-containers (nth($breakpoint, 1), nth($breakpoint, 2));
  }
}

/* Grid Rows */
@mixin build-grid-row ($grid_gutter_key, $grid_gutter_size, $breakpoint_key, $breakpoint) {
  @if ($grid_gutter_key == $breakpoint_key) {
    @if ($breakpoint) {
      @media (min-width: $breakpoint) {
        margin: auto ($grid_gutter_size / 2) * -1;
      }
    } @else {
      margin: auto ($grid_gutter_size / 2) * -1;
    }
  }
}
  
@mixin build-grid-rows ($breakpoint_key, $breakpoint) {
  @each $grid_gutter in $grid_gutter_sizes {
    @include build-grid-row (nth($grid_gutter, 1), nth($grid_gutter, 2), $breakpoint_key, $breakpoint);
  }
}

@mixin grid-row {
  @include clearfix;
  @each $breakpoint in $breakpoint_sizes {
    @include build-grid-rows (nth($breakpoint, 1), nth($breakpoint, 2));
  }
}

/* Grid cols */
@mixin build-grid-col-gutter ($grid_gutter_key, $grid_gutter_size, $breakpoint_key, $breakpoint) {
  @if ($grid_gutter_key == $breakpoint_key) {
    @if ($breakpoint) {
      @media (min-width: $breakpoint) {
        padding-left: ($grid_gutter_size / 2);
        padding-right: ($grid_gutter_size / 2);
      }
    } @else {
      padding-left: ($grid_gutter_size / 2);
      padding-right: ($grid_gutter_size / 2);
    }
  }
}
  
@mixin build-grid-col-gutters ($breakpoint_key, $breakpoint) {
  @each $grid_gutter in $grid_gutter_sizes {
    @include build-grid-col-gutter (nth($grid_gutter, 1), nth($grid_gutter, 2), $breakpoint_key, $breakpoint);
  }
}

@mixin grid-col-base {
  width: 100%;
  @each $breakpoint in $breakpoint_sizes {
    @include build-grid-col-gutters (nth($breakpoint, 1), nth($breakpoint, 2));
  }
}

@mixin grid-col {
  float: left;
  @include grid-col-base;
}

@mixin grid-col-rev {
  float: right;
  @include grid-col-base;
}

@mixin grid-col-size ($size, $breakpoint: false) {
  @if $breakpoint {
    @media (min-width: $breakpoint) {
      width: $size;
    }
  } @else {
    width: $size;
  }
}

@mixin grid-col-offset ($offset, $breakpoint: false, $direction: left) {
  @if $breakpoint {
    @media (min-width: $breakpoint) {
      margin-#{$direction}: $offset;
    }
  } @else {
    margin-#{$direction}: $offset;
  }
}

@mixin build-grid-col ($col_key, $col_size, $breakpoint_key, $breakpoint) {
  .grid-col.grid-col-offset-#{$col_key}-#{$breakpoint_key} {
    @include grid-col-offset($col_size, $breakpoint, left);
  }
  
  .grid-col-rev.grid-col-offset-#{$col_key}-#{$breakpoint_key} {
    @include grid-col-offset($col_size, $breakpoint, right);
  }
  
  .grid-col-#{$col_key}-#{$breakpoint_key} {
    @include grid-col-size($col_size, $breakpoint);
  }
}

@mixin build-grid-cols ($breakpoint_key, $breakpoint) {
  @each $col in $col_sizes {
    @include build-grid-col (nth($col, 1), nth($col, 2), $breakpoint_key, $breakpoint);
  }
}
/*
  [Breaks in < 3.3]
@mixin build-grid-cols ($breakpoint_key, $breakpoint) {
  @each $col_key, $col_size in $col_sizes {
    @include build-grid-col ($col_key, $col_size, $breakpoint_key, $breakpoint);
  }
}
*/