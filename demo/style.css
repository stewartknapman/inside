html{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-box-sizing:border-box;box-sizing:border-box;}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit;}body{padding:0;margin:0;font-size:100%;line-height:1.5em;color:#444;}header,main,article,aside,section,footer{overflow:auto;}h1,h2,h3,h4,h5,h6,p,blockquote,figure,dl,hr,th,td{padding:0;margin:0;}ol,ul{padding:0 0 0 3em;margin:0;}table{border-collapse:collapse;}h1,h2,h3,h4,h5,h6{font-size:inherit;}a{text-decoration:none;color:inherit;-webkit-transition:0.3s;transition:0.3s;}p a{text-decoration:underline;}p a:hover{color:#00B8E3;}img{max-width:100%;height:auto;border:0;}hr{margin:0.75em 0;border:none;border-bottom:solid 1px #ddd;}body{color:#444;}body,input,textarea,select{font-family:Baskerville,"Baskerville Old Face","Hoefler Text",Garamond,"Times New Roman",serif;}::-moz-selection{color:#000;background:rgba(0, 184, 227, 0.6);text-shadow:none;}::selection{color:#000;background:rgba(0, 184, 227, 0.6);text-shadow:none;}p,blockquote,figure,ol,ul,dl{margin-bottom:1.5em;}small{font-size:0.618em;}
/*# sourceMappingURL=data:application/json;base64, */